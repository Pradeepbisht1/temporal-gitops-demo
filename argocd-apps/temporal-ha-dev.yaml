apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: temporal-ha-dev
  namespace: argocd
spec:
  project: default

  destination:
    name: eks-gitops-bridge
    namespace: temporal

  source:
    repoURL: https://go.temporal.io/helm-charts
    chart: temporal
    targetRevision: 0.47.0
    helm:
      values: |
        nameOverride: temporal-ha
        fullnameOverride: temporal-ha

        prometheus:
          enabled: true
          # Node Exporter often needs tolerations to schedule on tainted nodes
          nodeExporter:
            tolerations:
              - operator: "Exists"
          # (Optional) if you already have a bound PVC for Prometheus and want to reuse it, uncomment and set the actual name:
          # server:
          #   persistentVolume:
          #     existingClaim: temporal-ha-prometheus-server

        grafana:
          enabled: false

        server:
          replicaCount: 3
          podDisruptionBudget:
            enabled: true
            minAvailable: 1

          # App DSNs (normal user) come from this secret
          envFrom:
            - secretRef:
                name: temporal-sql-secrets

          additionalEnv:
            - name: TEMPORAL_ENV
              value: "kubernetes"
            - name: TEMPORAL_CONFIG_DIR
              value: "/etc/temporal/config"
          additionalArgs:
            - "--env"
            - "kubernetes"
            - "--config"
            - "/etc/temporal/config/config.yaml"

          # Use SQL (Postgres) persistence
          config:
            persistence:
              default:
                driver: sql
                sql:
                  driver: postgres12
                  dsn: ${SQL_DEFAULT_DSN}
                  maxConns: 20
                  maxConnLifetime: 1h
              visibility:
                driver: sql
                sql:
                  driver: postgres12
                  dsn: ${SQL_VISIBILITY_DSN}
                  maxConns: 20
                  maxConnLifetime: 1h

        # Ensure non-SQL backends are disabled
        cassandra:
          enabled: false
        elasticsearch:
          enabled: false
        mysql:
          enabled: false

        # Run Postgres schema jobs; create DBs with admin DSN
        schema:
          createDatabase:
            enabled: true
            envFrom:
              - secretRef:
                  name: temporal-sql-secrets-admin
          setup:
            enabled: true
            envFrom:
              - secretRef:
                  name: temporal-sql-secrets
          update:
            enabled: true
            envFrom:
              - secretRef:
                  name: temporal-sql-secrets

        web:
          enabled: true
          replicaCount: 2
          service:
            type: ClusterIP

  # Ignore immutable PVC spec drift + keep normal automated sync
  ignoreDifferences:
    - group: ""
      kind: PersistentVolumeClaim
      jqPathExpressions:
        - ".spec.storageClassName"
        - ".spec.volumeName"
        - ".spec.selector"

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - RespectIgnoreDifferences=true
